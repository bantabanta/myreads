{"ast":null,"code":"var _jsxFileName = \"/Users/timbanta/code/udacity-react/myreads/starter/src/components/Search.js\",\n    _s = $RefreshSig$();\n\nimport * as BooksAPI from \"../BooksAPI\";\nimport BookView from './BookView';\nimport { Link } from \"react-router-dom\";\nimport { useState } from \"react\";\nimport PropTypes from 'prop-types';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Search = ({\n  books,\n  onUpdateShelf\n}) => {\n  _s();\n\n  const [query, setQuery] = useState('');\n  const [queryBooks, setQueryBooks] = useState([]);\n\n  const updateQuery = query => {\n    setQuery(query);\n    fetchQueryBooks(query);\n  };\n\n  const fetchQueryBooks = query => {\n    if (query.length > 0) {\n      const setShow = async () => {\n        const res = await BooksAPI.search(query); // if (res.error) {\n        //   setQueryBooks([]);\n        // } else {\n        //   setQueryBooks(res);\n        // };\n\n        {\n          res.error ? setQueryBooks([]) : setQueryBooks(res);\n        }\n      };\n\n      setShow();\n    } else {\n      setQueryBooks([]);\n    }\n\n    ;\n  }; // If querryBook is already in books, inherit shelf\n  // key/value. If not then set queryBooks shelf to none.\n  // This feels really 'verbose' for what it's doing...\n  // not sure how to clean up.\n\n\n  const updatedQuery = queryBooks.map(queryBook => {\n    books.map(book => {\n      if (book.id === queryBook.id) {\n        queryBook.shelf = book.shelf;\n      }\n\n      return book;\n    });\n\n    if (!queryBook.hasOwnProperty('shelf')) {\n      queryBook.shelf = 'none';\n    }\n\n    ;\n    return queryBook;\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"search-books\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"search-books-bar\",\n      children: [/*#__PURE__*/_jsxDEV(Link, {\n        className: \"close-search\",\n        to: \"/\",\n        children: \"Back to Home\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"search-books-input-wrapper\",\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          className: \"search-contacts\",\n          type: \"text\",\n          placeholder: \"Search books by Title or Author...\",\n          value: query,\n          onChange: event => updateQuery(event.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this), query !== '' && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"search-books-results\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"showing-books\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          children: [\"Showing \", queryBooks.length, \" results for '\", query, \"'\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => updateQuery(''),\n          children: \"Clear Search\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"ol\", {\n        className: \"books-grid\",\n        children: updatedQuery.map(queryBook => /*#__PURE__*/_jsxDEV(BookView, {\n          currentBook: queryBook,\n          shelf: queryBook.shelf,\n          onUpdateShelf: onUpdateShelf\n        }, queryBook.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 19\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Search, \"TyNTIyF/qrPbRQ5MSHdGXo2x384=\");\n\n_c = Search;\nSearch.propTypes = {\n  books: PropTypes.array.isRequired,\n  onUpdateShelf: PropTypes.func.isRequired\n};\nexport default Search;\n\nvar _c;\n\n$RefreshReg$(_c, \"Search\");","map":{"version":3,"sources":["/Users/timbanta/code/udacity-react/myreads/starter/src/components/Search.js"],"names":["BooksAPI","BookView","Link","useState","PropTypes","Search","books","onUpdateShelf","query","setQuery","queryBooks","setQueryBooks","updateQuery","fetchQueryBooks","length","setShow","res","search","error","updatedQuery","map","queryBook","book","id","shelf","hasOwnProperty","event","target","value","propTypes","array","isRequired","func"],"mappings":"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","sourcesContent":["import * as BooksAPI from \"../BooksAPI\";\nimport BookView from './BookView';\nimport { Link } from \"react-router-dom\";\nimport { useState } from \"react\";\nimport PropTypes from 'prop-types';\n\nconst Search = ({ books, onUpdateShelf }) => {\n  const [query, setQuery] = useState('');\n  const [queryBooks, setQueryBooks] = useState([]);\n\n  const updateQuery = (query) => {\n    setQuery(query);\n    fetchQueryBooks(query);\n  };\n\n  const fetchQueryBooks = (query) => {\n    if (query.length > 0) {\n      const setShow = async () => {\n        const res = await BooksAPI.search(query);\n        // if (res.error) {\n        //   setQueryBooks([]);\n        // } else {\n        //   setQueryBooks(res);\n        // };\n        {res.error\n        ? setQueryBooks([])\n        : setQueryBooks(res)\n        }};\n        setShow();\n      } else {\n      setQueryBooks([]);\n    };\n  };\n\n  // If querryBook is already in books, inherit shelf\n  // key/value. If not then set queryBooks shelf to none.\n  // This feels really 'verbose' for what it's doing...\n  // not sure how to clean up.\n  const updatedQuery = queryBooks.map(queryBook => {\n    books.map(book => {\n      if (book.id === queryBook.id) {\n        queryBook.shelf = book.shelf;\n      }\n      return book;\n    }\n    );\n    if (!queryBook.hasOwnProperty('shelf')) {\n      queryBook.shelf = 'none'\n    };\n    return queryBook;\n  });\n\n  return (\n\n    <div className=\"search-books\">\n      <div className=\"search-books-bar\">\n        <Link className=\"close-search\" to=\"/\" >\n          Back to Home\n        </Link>\n        <div className=\"search-books-input-wrapper\">\n          <input\n            className=\"search-contacts\"\n            type=\"text\"\n            placeholder=\"Search books by Title or Author...\"\n            value={query}\n            onChange={(event) => updateQuery(event.target.value)}\n          />\n        </div>\n      </div>\n      {\n        query !== '' && (\n          <div className=\"search-books-results\">\n            <div className=\"showing-books\">\n              <span>\n                Showing {queryBooks.length} results for '{query}'\n              </span>\n              <button onClick={() => updateQuery('')}>Clear Search</button>\n            </div>\n            <ol className=\"books-grid\">\n              {updatedQuery.map((queryBook) =>\n                  <BookView\n                  key={queryBook.id}\n                    currentBook={queryBook}\n                    shelf={queryBook.shelf}\n                    onUpdateShelf={onUpdateShelf}/>\n              )}\n            </ol>\n          </div>\n        )}\n    </div>\n  )\n};\n\nSearch.propTypes = {\n  books: PropTypes.array.isRequired,\n  onUpdateShelf: PropTypes.func.isRequired\n}\n\nexport default Search;\n"]},"metadata":{},"sourceType":"module"}