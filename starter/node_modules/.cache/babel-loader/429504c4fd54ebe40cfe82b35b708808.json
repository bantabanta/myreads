{"ast":null,"code":"var _jsxFileName = \"/Users/timbanta/code/udacity-react/myreads/starter/src/components/SearchResults.js\";\nimport BookView from './BookView';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst SearchResults = ({\n  query,\n  books,\n  queryBooks,\n  updateQuery,\n  onUpdateShelf\n}) => {\n  const updatedQuery = queryBooks.map(queryBook => {\n    books.map(book => {\n      if (book.id === queryBook.id) {\n        queryBook.shelf = book.shelf;\n      }\n\n      return book;\n    });\n\n    if (!queryBook.shelf) {\n      queryBook.shelf = 'none';\n    }\n\n    ;\n    return queryBook;\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: query !== '' && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"search-books-results\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"showing-books\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"ol\", {\n        className: \"books-grid\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          children: [queryBooks.length, \" results for '\", query, \"'...\", /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => updateQuery(''),\n            children: \"clear search\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 28,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 26,\n          columnNumber: 15\n        }, this), updatedQuery.map(queryBook => /*#__PURE__*/_jsxDEV(BookView, {\n          currentBook: queryBook,\n          onUpdateShelf: onUpdateShelf\n        }, queryBook.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 17\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 11\n    }, this)\n  }, \"SearchResults\", false, {\n    fileName: _jsxFileName,\n    lineNumber: 19,\n    columnNumber: 5\n  }, this);\n};\n\n_c = SearchResults;\nexport default SearchResults; //need: query, queryBooks, updateQuery, updatedQuery, onUpdateShelf\n\nvar _c;\n\n$RefreshReg$(_c, \"SearchResults\");","map":{"version":3,"sources":["/Users/timbanta/code/udacity-react/myreads/starter/src/components/SearchResults.js"],"names":["BookView","SearchResults","query","books","queryBooks","updateQuery","onUpdateShelf","updatedQuery","map","queryBook","book","id","shelf","length"],"mappings":";AAAA,OAAOA,QAAP,MAAqB,YAArB;;;AAEA,MAAMC,aAAa,GAAG,CAAC;AAACC,EAAAA,KAAD;AAAQC,EAAAA,KAAR;AAAeC,EAAAA,UAAf;AAA2BC,EAAAA,WAA3B;AAAwCC,EAAAA;AAAxC,CAAD,KAA4D;AAChF,QAAMC,YAAY,GAAGH,UAAU,CAACI,GAAX,CAAeC,SAAS,IAAI;AAC/CN,IAAAA,KAAK,CAACK,GAAN,CAAUE,IAAI,IAAI;AAChB,UAAIA,IAAI,CAACC,EAAL,KAAYF,SAAS,CAACE,EAA1B,EAA8B;AAC5BF,QAAAA,SAAS,CAACG,KAAV,GAAkBF,IAAI,CAACE,KAAvB;AACD;;AACD,aAAOF,IAAP;AACD,KALD;;AAOA,QAAI,CAACD,SAAS,CAACG,KAAf,EAAsB;AACpBH,MAAAA,SAAS,CAACG,KAAV,GAAkB,MAAlB;AACD;;AAAA;AACD,WAAOH,SAAP;AACD,GAZoB,CAArB;AAcA,sBACE;AAAA,cAEIP,KAAK,KAAK,EAAV,iBACE;AAAK,MAAA,SAAS,EAAC,sBAAf;AAAA,8BACE;AAAK,QAAA,SAAS,EAAC;AAAf;AAAA;AAAA;AAAA;AAAA,cADF,eAGE;AAAI,QAAA,SAAS,EAAC,YAAd;AAAA,gCACE;AAAA,qBACGE,UAAU,CAACS,MADd,oBACoCX,KADpC,uBAEA;AAAQ,YAAA,OAAO,EAAE,MAAMG,WAAW,CAAC,EAAD,CAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAFA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,EAKGE,YAAY,CAACC,GAAb,CAAiBC,SAAS,iBACzB,QAAC,QAAD;AAEE,UAAA,WAAW,EAAEA,SAFf;AAGE,UAAA,aAAa,EAAEH;AAHjB,WACOG,SAAS,CAACE,EADjB;AAAA;AAAA;AAAA;AAAA,gBADD,CALH;AAAA;AAAA;AAAA;AAAA;AAAA,cAHF;AAAA;AAAA;AAAA;AAAA;AAAA;AAHN,KAAS,eAAT;AAAA;AAAA;AAAA;AAAA,UADF;AAuBD,CAtCD;;KAAMV,a;AAwCN,eAAeA,aAAf,C,CACA","sourcesContent":["import BookView from './BookView';\n\nconst SearchResults = ({query, books, queryBooks, updateQuery, onUpdateShelf}) => {\n  const updatedQuery = queryBooks.map(queryBook => {\n    books.map(book => {\n      if (book.id === queryBook.id) {\n        queryBook.shelf = book.shelf;\n      }\n      return book;\n    }\n    );\n    if (!queryBook.shelf) {\n      queryBook.shelf = 'none'\n    };\n    return queryBook;\n  });\n\n  return (\n    <div key=\"SearchResults\">\n      {\n        query !== '' && (\n          <div className=\"search-books-results\">\n            <div className=\"showing-books\">\n            </div>\n            <ol className=\"books-grid\">\n              <span>\n                {queryBooks.length} results for '{query}'...\n              <button onClick={() => updateQuery('')}>clear search</button>\n              </span>\n              {updatedQuery.map(queryBook =>\n                <BookView\n                  key={queryBook.id}\n                  currentBook={queryBook}\n                  onUpdateShelf={onUpdateShelf} />\n              )}\n            </ol>\n          </div>\n        )}\n    </div>\n  )\n}\n\nexport default SearchResults;\n//need: query, queryBooks, updateQuery, updatedQuery, onUpdateShelf\n"]},"metadata":{},"sourceType":"module"}