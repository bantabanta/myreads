{"ast":null,"code":"var _jsxFileName = \"/Users/timbanta/code/udacity-react/myreads/starter/src/components/BookView.js\";\nimport PropTypes from 'prop-types';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst BookView = ({\n  currentBook,\n  onUpdateShelf\n}) => {\n  // TODO: set an 'image not found' image if no thumbnail\n  const bookCover = book => book.imageLinks ? book.imageLinks.smallThumbnail // : 'https://upload.wikimedia.org/wikipedia/commons/thumb/4/41/Noimage.svg/130px-Noimage.svg.png';\n  : '../icons/no-image.png'; // callback:\n\n\n  const handleChange = e => onUpdateShelf(currentBook, e.target.value);\n\n  return /*#__PURE__*/_jsxDEV(\"li\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"book\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"book-top\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"book-cover\",\n          style: {\n            width: 128,\n            height: 188 // backgroundImage:\n            //   `url(${bookCover(currentBook)})`,\n\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 19,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"book-shelf-changer\",\n          children: /*#__PURE__*/_jsxDEV(\"select\", {\n            defaultValue: currentBook.shelf,\n            onChange: handleChange,\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"none\",\n              disabled: true,\n              children: \"Move to...\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 31,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"currentlyReading\",\n              children: \"Currently Reading\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 32,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"wantToRead\",\n              children: \"Want to Read\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 33,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"read\",\n              children: \"Read\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 34,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"none\",\n              children: \"None\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 35,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 29,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 28,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"book-title\",\n        children: currentBook.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 9\n      }, this), currentBook.authors && currentBook.authors.map((author, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"book-authors\",\n        children: author\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 13\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 16,\n    columnNumber: 5\n  }, this);\n};\n\n_c = BookView;\nBookView.propTypes = {\n  currentBook: PropTypes.object.isRequired,\n  onUpdateShelf: PropTypes.func.isRequired\n};\nexport default BookView;\n\nvar _c;\n\n$RefreshReg$(_c, \"BookView\");","map":{"version":3,"sources":["/Users/timbanta/code/udacity-react/myreads/starter/src/components/BookView.js"],"names":["PropTypes","BookView","currentBook","onUpdateShelf","bookCover","book","imageLinks","smallThumbnail","handleChange","e","target","value","width","height","shelf","title","authors","map","author","index","propTypes","object","isRequired","func"],"mappings":";AAAA,OAAOA,SAAP,MAAsB,YAAtB;;;AAEA,MAAMC,QAAQ,GAAG,CAAC;AAAEC,EAAAA,WAAF;AAAeC,EAAAA;AAAf,CAAD,KAAoC;AAEnD;AACA,QAAMC,SAAS,GAAIC,IAAD,IAChBA,IAAI,CAACC,UAAL,GACID,IAAI,CAACC,UAAL,CAAgBC,cADpB,CAEE;AAFF,IAGI,uBAJN,CAHmD,CASnD;;;AACA,QAAMC,YAAY,GAAIC,CAAD,IAAON,aAAa,CAACD,WAAD,EAAcO,CAAC,CAACC,MAAF,CAASC,KAAvB,CAAzC;;AAEA,sBACE;AAAA,2BACE;AAAK,MAAA,SAAS,EAAC,MAAf;AAAA,8BACE;AAAK,QAAA,SAAS,EAAC,UAAf;AAAA,gCACE;AACE,UAAA,SAAS,EAAC,YADZ;AAEE,UAAA,KAAK,EAAE;AACLC,YAAAA,KAAK,EAAE,GADF;AAELC,YAAAA,MAAM,EAAE,GAFH,CAGL;AACA;;AAJK;AAFT;AAAA;AAAA;AAAA;AAAA,gBADF,eAUE;AAAK,UAAA,SAAS,EAAC,oBAAf;AAAA,iCACE;AAAQ,YAAA,YAAY,EAAEX,WAAW,CAACY,KAAlC;AACA,YAAA,QAAQ,EAAEN,YADV;AAAA,oCAEE;AAAQ,cAAA,KAAK,EAAC,MAAd;AAAqB,cAAA,QAAQ,MAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAFF,eAGE;AAAQ,cAAA,KAAK,EAAC,kBAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAHF,eAIE;AAAQ,cAAA,KAAK,EAAC,YAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAJF,eAKE;AAAQ,cAAA,KAAK,EAAC,MAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBALF,eAME;AAAQ,cAAA,KAAK,EAAC,MAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBANF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,gBAVF;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAsBE;AAAK,QAAA,SAAS,EAAC,YAAf;AAAA,kBAA6BN,WAAW,CAACa;AAAzC;AAAA;AAAA;AAAA;AAAA,cAtBF,EAuBGb,WAAW,CAACc,OAAZ,IACCd,WAAW,CAACc,OAAZ,CAAoBC,GAApB,CAAwB,CAACC,MAAD,EAASC,KAAT,kBACtB;AAAiB,QAAA,SAAS,EAAC,cAA3B;AAAA,kBAA2CD;AAA3C,SAAUC,KAAV;AAAA;AAAA;AAAA;AAAA,cADF,CAxBJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAgCD,CA5CD;;KAAMlB,Q;AA8CNA,QAAQ,CAACmB,SAAT,GAAqB;AACnBlB,EAAAA,WAAW,EAAEF,SAAS,CAACqB,MAAV,CAAiBC,UADX;AAEnBnB,EAAAA,aAAa,EAAEH,SAAS,CAACuB,IAAV,CAAeD;AAFX,CAArB;AAKA,eAAerB,QAAf","sourcesContent":["import PropTypes from 'prop-types';\n\nconst BookView = ({ currentBook, onUpdateShelf }) => {\n\n  // TODO: set an 'image not found' image if no thumbnail\n  const bookCover = (book) =>\n    book.imageLinks\n      ? book.imageLinks.smallThumbnail\n      // : 'https://upload.wikimedia.org/wikipedia/commons/thumb/4/41/Noimage.svg/130px-Noimage.svg.png';\n      : '../icons/no-image.png';\n\n  // callback:\n  const handleChange = (e) => onUpdateShelf(currentBook, e.target.value)\n\n  return (\n    <li>\n      <div className=\"book\">\n        <div className=\"book-top\">\n          <div\n            className=\"book-cover\"\n            style={{\n              width: 128,\n              height: 188,\n              // backgroundImage:\n              //   `url(${bookCover(currentBook)})`,\n            }}\n          ></div>\n          <div className=\"book-shelf-changer\">\n            <select defaultValue={currentBook.shelf}\n            onChange={handleChange}>\n              <option value=\"none\" disabled>Move to...</option>\n              <option value=\"currentlyReading\">Currently Reading</option>\n              <option value=\"wantToRead\">Want to Read</option>\n              <option value=\"read\">Read</option>\n              <option value=\"none\">None</option>\n            </select>\n          </div>\n        </div>\n        <div className=\"book-title\">{currentBook.title}</div>\n        {currentBook.authors &&\n          currentBook.authors.map((author, index) => (\n            <div key={index} className=\"book-authors\">{author}</div>\n          ))}\n      </div>\n    </li>\n  )\n};\n\nBookView.propTypes = {\n  currentBook: PropTypes.object.isRequired,\n  onUpdateShelf: PropTypes.func.isRequired\n};\n\nexport default BookView;\n"]},"metadata":{},"sourceType":"module"}