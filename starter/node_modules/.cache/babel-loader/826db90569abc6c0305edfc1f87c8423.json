{"ast":null,"code":"var _jsxFileName = \"/Users/timbanta/code/udacity-react/myreads/starter/src/components/Search.js\",\n    _s = $RefreshSig$();\n\nimport { Link } from \"react-router-dom\";\nimport { useState } from \"react\";\nimport * as BooksAPI from \"../BooksAPI\";\nimport PropTypes from 'prop-types';\nimport BookView from './BookView';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Search = ({\n  books\n}) => {\n  _s();\n\n  const [query, setQuery] = useState('');\n  const [queryBooks, setQueryBooks] = useState([]);\n\n  const updateQuery = query => {\n    setQuery(query);\n    fetchQueryBooks(query);\n  };\n\n  const clearQuery = () => {\n    updateQuery('');\n  }; // fetching query books:\n  // check that there is is a query, if there is\n  // fetch from the API, if API errors\n  // set the queryBooks to array,\n  // else, set it to the result of the call\n  // These books don't have a shelf key\n\n\n  const fetchQueryBooks = query => {\n    if (query.length > 0) {\n      const setShow = async () => {\n        const res = await BooksAPI.search(query, 10);\n\n        if (res.error) {\n          setQueryBooks([]);\n        } else {\n          setQueryBooks(res);\n        }\n      };\n\n      setShow();\n    } else {\n      setQueryBooks([]);\n    }\n  };\n\n  const setShelf = book => {\n    book.shelf = 'none';\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"search-books\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"search-books-bar\",\n      children: [/*#__PURE__*/_jsxDEV(Link, {\n        className: \"close-search\",\n        to: \"/\",\n        children: \"Back to Home\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"search-books-input-wrapper\",\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          className: \"search-contacts\",\n          type: \"text\",\n          placeholder: \"Search books by Title or Author...\",\n          value: query,\n          onChange: event => updateQuery(event.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this), query !== '' && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"search-books-results\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"showing-books\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          children: [\"Showing \", queryBooks.length, \" results for '\", query, \"'\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => clearQuery(),\n          children: \"Clear Search\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"ol\", {\n        className: \"books-grid\",\n        children: queryBooks.map(book =>\n        /*#__PURE__*/\n        // {book.shelf = 'none'}\n        _jsxDEV(BookView, {\n          currentBook: book\n        }, book.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 17\n        }, this) // <li key={book.id}>\n        //   <div className=\"book-title\">{book.title}</div>\n        //   <div className=\"book-authors\">{book.authors}</div>\n        //   <div className=\"book-authors\">{book.shelf}</div>\n        //   <div className=\"book-authors\">{Thumbnail(book)}</div>\n        // </li>\n        )\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Search, \"TyNTIyF/qrPbRQ5MSHdGXo2x384=\");\n\n_c = Search;\nSearch.propTypes = {\n  books: PropTypes.array.isRequired\n};\nexport default Search;\n\nvar _c;\n\n$RefreshReg$(_c, \"Search\");","map":{"version":3,"sources":["/Users/timbanta/code/udacity-react/myreads/starter/src/components/Search.js"],"names":["Link","useState","BooksAPI","PropTypes","BookView","Search","books","query","setQuery","queryBooks","setQueryBooks","updateQuery","fetchQueryBooks","clearQuery","length","setShow","res","search","error","setShelf","book","shelf","event","target","value","map","id","propTypes","array","isRequired"],"mappings":"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","sourcesContent":["import { Link } from \"react-router-dom\";\nimport { useState } from \"react\";\nimport * as BooksAPI from \"../BooksAPI\";\nimport PropTypes from 'prop-types';\nimport BookView from './BookView';\n\nconst Search = ({ books }) => {\n  const [query, setQuery] = useState('');\n  const [queryBooks, setQueryBooks] = useState([]);\n\n  const updateQuery = (query) => {\n    setQuery(query);\n    fetchQueryBooks(query);\n  };\n\n  const clearQuery = () => {\n    updateQuery('');\n  };\n\n  // fetching query books:\n  // check that there is is a query, if there is\n  // fetch from the API, if API errors\n  // set the queryBooks to array,\n  // else, set it to the result of the call\n  // These books don't have a shelf key\n  const fetchQueryBooks = (query) => {\n    if (query.length > 0) {\n      const setShow = async () => {\n        const res = await BooksAPI.search(query, 10);\n        if (res.error) {\n          setQueryBooks([]);\n        } else {\n          setQueryBooks(res);\n        }\n      }\n      setShow();\n    } else {\n      setQueryBooks([]);\n    }\n  };\n\n  const setShelf = (book) => {\n    book.shelf = 'none'\n  }\n\n  return (\n\n    <div className=\"search-books\">\n      <div className=\"search-books-bar\">\n        <Link className=\"close-search\" to=\"/\" >\n          Back to Home\n        </Link>\n        <div className=\"search-books-input-wrapper\">\n          <input\n            className=\"search-contacts\"\n            type=\"text\"\n            placeholder=\"Search books by Title or Author...\"\n            value={query}\n            onChange={(event) => updateQuery(event.target.value)}\n          />\n        </div>\n      </div>\n\n      {\n        query !== '' && (\n          <div className=\"search-books-results\">\n            <div className=\"showing-books\">\n              <span>\n                Showing {queryBooks.length} results for '{query}'\n              </span>\n              <button onClick={() => clearQuery()}>Clear Search</button>\n            </div>\n            <ol className=\"books-grid\">\n              {queryBooks.map((book) =>\n                // {book.shelf = 'none'}\n                <BookView key={book.id} currentBook={book}/>\n                // <li key={book.id}>\n                //   <div className=\"book-title\">{book.title}</div>\n                //   <div className=\"book-authors\">{book.authors}</div>\n                //   <div className=\"book-authors\">{book.shelf}</div>\n                //   <div className=\"book-authors\">{Thumbnail(book)}</div>\n                // </li>\n              )}\n            </ol>\n          </div>\n        )}\n    </div>\n  )\n};\n\nSearch.propTypes = {\n  books: PropTypes.array.isRequired\n}\n\nexport default Search;\n"]},"metadata":{},"sourceType":"module"}